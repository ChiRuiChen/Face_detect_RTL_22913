// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_ss_ap_fixed_ap_fixed_16_4_4_1_0_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_pp0_stage2 = 11'd8;
parameter    ap_ST_fsm_pp0_stage3 = 11'd16;
parameter    ap_ST_fsm_pp0_stage4 = 11'd32;
parameter    ap_ST_fsm_state9 = 11'd64;
parameter    ap_ST_fsm_state10 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg[15:0] res_V_V_din;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [11:0] w17_V_address0;
reg    w17_V_ce0;
wire   [29:0] w17_V_q0;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln579_reg_1505;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg  signed [15:0] tmp_V_142_reg_146;
reg  signed [15:0] tmp_V_141_reg_159;
reg  signed [15:0] tmp_V_140_reg_172;
reg  signed [15:0] tmp_V_139_reg_185;
reg  signed [15:0] tmp_V_138_reg_198;
reg   [12:0] i_in_0_reg_211;
wire   [0:0] icmp_ln579_fu_222_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln579_reg_1505_pp0_iter1_reg;
wire   [12:0] i_in_fu_228_p2;
reg   [12:0] i_in_reg_1509;
wire  signed [21:0] sext_ln1116_fu_243_p1;
reg  signed [21:0] sext_ln1116_reg_1519;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire  signed [21:0] mul_ln1118_fu_1452_p2;
reg  signed [21:0] mul_ln1118_reg_1527;
reg   [0:0] tmp_2_reg_1534;
wire   [3:0] trunc_ln718_fu_258_p1;
reg   [3:0] trunc_ln718_reg_1542;
reg   [0:0] tmp_4_reg_1547;
reg  signed [5:0] tmp_27_reg_1553;
reg  signed [5:0] tmp_28_reg_1558;
reg  signed [5:0] tmp_29_reg_1563;
reg  signed [5:0] tmp_30_reg_1568;
wire   [15:0] select_ln785_fu_516_p3;
reg   [15:0] select_ln785_reg_1573;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_10_reg_1578;
reg   [0:0] tmp_12_reg_1586;
wire   [15:0] add_ln415_1_fu_589_p2;
reg   [15:0] add_ln415_1_reg_1592;
reg   [0:0] tmp_14_reg_1597;
reg   [0:0] tmp_15_reg_1603;
wire   [15:0] select_ln785_1_fu_748_p3;
reg   [15:0] select_ln785_1_reg_1609;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] tmp_18_reg_1614;
reg   [0:0] tmp_20_reg_1622;
wire   [15:0] add_ln415_2_fu_821_p2;
reg   [15:0] add_ln415_2_reg_1628;
reg   [0:0] tmp_22_reg_1633;
reg   [0:0] tmp_23_reg_1639;
wire   [15:0] select_ln785_2_fu_980_p3;
reg   [15:0] select_ln785_2_reg_1645;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] tmp_26_reg_1650;
reg   [0:0] tmp_32_reg_1658;
wire   [15:0] add_ln415_3_fu_1053_p2;
reg   [15:0] add_ln415_3_reg_1664;
reg   [0:0] tmp_34_reg_1669;
reg   [0:0] tmp_35_reg_1675;
wire   [15:0] select_ln785_3_fu_1212_p3;
reg   [15:0] select_ln785_3_reg_1681;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_38_reg_1686;
reg   [0:0] tmp_40_reg_1694;
wire   [15:0] add_ln415_4_fu_1285_p2;
reg   [15:0] add_ln415_4_reg_1700;
reg   [0:0] tmp_42_reg_1705;
reg   [0:0] tmp_43_reg_1711;
wire   [15:0] select_ln785_4_fu_1444_p3;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [12:0] ap_phi_mux_i_in_0_phi_fu_215_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln587_fu_234_p1;
wire  signed [5:0] trunc_ln587_fu_239_p1;
wire    ap_block_pp0_stage2;
wire   [0:0] icmp_ln718_fu_324_p2;
wire   [0:0] tmp_3_fu_317_p3;
wire   [0:0] or_ln412_fu_329_p2;
wire   [0:0] tmp_5_fu_335_p3;
wire   [0:0] and_ln415_fu_342_p2;
wire   [15:0] trunc_ln_fu_308_p4;
wire   [15:0] zext_ln415_fu_348_p1;
wire   [15:0] add_ln415_fu_352_p2;
wire   [0:0] tmp_6_fu_358_p3;
wire   [0:0] xor_ln416_fu_366_p2;
wire   [0:0] and_ln416_fu_372_p2;
wire   [0:0] xor_ln779_fu_385_p2;
wire   [0:0] xor_ln781_5_fu_397_p2;
wire   [0:0] or_ln781_fu_402_p2;
wire   [0:0] tmp_7_fu_377_p3;
wire   [0:0] xor_ln785_fu_413_p2;
wire   [0:0] or_ln785_fu_418_p2;
wire   [0:0] select_ln779_fu_390_p3;
wire   [0:0] and_ln781_fu_408_p2;
wire   [0:0] and_ln785_fu_424_p2;
wire   [0:0] and_ln786_fu_430_p2;
wire   [0:0] or_ln340_fu_436_p2;
wire   [0:0] xor_ln786_fu_448_p2;
wire   [0:0] and_ln785_5_fu_442_p2;
wire   [0:0] and_ln340_fu_454_p2;
wire   [0:0] or_ln340_5_fu_460_p2;
wire  signed [15:0] select_ln340_fu_466_p3;
wire  signed [16:0] sext_ln703_1_fu_478_p1;
wire  signed [16:0] sext_ln703_fu_474_p1;
wire   [16:0] add_ln1192_fu_482_p2;
wire   [15:0] acc_0_0_V_fu_496_p2;
wire   [0:0] tmp_9_fu_502_p3;
wire   [0:0] tmp_8_fu_488_p3;
wire   [0:0] xor_ln785_1_fu_510_p2;
wire  signed [21:0] mul_ln1118_1_fu_1461_p2;
wire   [3:0] trunc_ln718_1_fu_550_p1;
wire   [0:0] icmp_ln718_1_fu_553_p2;
wire   [0:0] tmp_11_fu_543_p3;
wire   [0:0] or_ln412_1_fu_566_p2;
wire   [0:0] tmp_13_fu_572_p3;
wire   [0:0] and_ln415_1_fu_579_p2;
wire   [15:0] trunc_ln708_1_fu_534_p4;
wire   [15:0] zext_ln415_1_fu_585_p1;
wire    ap_block_pp0_stage3;
wire   [0:0] xor_ln416_1_fu_611_p2;
wire   [0:0] and_ln416_1_fu_616_p2;
wire   [0:0] xor_ln779_1_fu_621_p2;
wire   [0:0] xor_ln781_fu_633_p2;
wire   [0:0] or_ln781_1_fu_638_p2;
wire   [0:0] xor_ln785_5_fu_648_p2;
wire   [0:0] or_ln785_1_fu_653_p2;
wire   [0:0] select_ln779_1_fu_626_p3;
wire   [0:0] and_ln781_1_fu_643_p2;
wire   [0:0] and_ln785_1_fu_658_p2;
wire   [0:0] and_ln786_1_fu_664_p2;
wire   [0:0] or_ln340_1_fu_669_p2;
wire   [0:0] xor_ln786_1_fu_681_p2;
wire   [0:0] and_ln785_6_fu_675_p2;
wire   [0:0] and_ln340_1_fu_687_p2;
wire   [0:0] or_ln340_6_fu_693_p2;
wire  signed [15:0] select_ln340_1_fu_699_p3;
wire  signed [16:0] sext_ln703_6_fu_710_p1;
wire  signed [16:0] sext_ln703_5_fu_706_p1;
wire   [16:0] add_ln1192_1_fu_714_p2;
wire   [15:0] acc_0_1_V_fu_728_p2;
wire   [0:0] tmp_17_fu_734_p3;
wire   [0:0] tmp_16_fu_720_p3;
wire   [0:0] xor_ln785_6_fu_742_p2;
wire  signed [21:0] mul_ln1118_2_fu_1472_p2;
wire   [3:0] trunc_ln718_2_fu_782_p1;
wire   [0:0] icmp_ln718_2_fu_785_p2;
wire   [0:0] tmp_19_fu_775_p3;
wire   [0:0] or_ln412_2_fu_798_p2;
wire   [0:0] tmp_21_fu_804_p3;
wire   [0:0] and_ln415_2_fu_811_p2;
wire   [15:0] trunc_ln708_2_fu_766_p4;
wire   [15:0] zext_ln415_2_fu_817_p1;
wire    ap_block_pp0_stage4;
wire   [0:0] xor_ln416_2_fu_843_p2;
wire   [0:0] and_ln416_2_fu_848_p2;
wire   [0:0] xor_ln779_2_fu_853_p2;
wire   [0:0] xor_ln781_6_fu_865_p2;
wire   [0:0] or_ln781_2_fu_870_p2;
wire   [0:0] xor_ln785_2_fu_880_p2;
wire   [0:0] or_ln785_2_fu_885_p2;
wire   [0:0] select_ln779_2_fu_858_p3;
wire   [0:0] and_ln781_2_fu_875_p2;
wire   [0:0] and_ln785_2_fu_890_p2;
wire   [0:0] and_ln786_2_fu_896_p2;
wire   [0:0] or_ln340_2_fu_901_p2;
wire   [0:0] xor_ln786_2_fu_913_p2;
wire   [0:0] and_ln785_7_fu_907_p2;
wire   [0:0] and_ln340_2_fu_919_p2;
wire   [0:0] or_ln340_7_fu_925_p2;
wire  signed [15:0] select_ln340_2_fu_931_p3;
wire  signed [16:0] sext_ln703_7_fu_942_p1;
wire  signed [16:0] sext_ln703_2_fu_938_p1;
wire   [16:0] add_ln1192_2_fu_946_p2;
wire   [15:0] acc_0_2_V_fu_960_p2;
wire   [0:0] tmp_25_fu_966_p3;
wire   [0:0] tmp_24_fu_952_p3;
wire   [0:0] xor_ln785_7_fu_974_p2;
wire  signed [21:0] mul_ln1118_3_fu_1483_p2;
wire   [3:0] trunc_ln718_3_fu_1014_p1;
wire   [0:0] icmp_ln718_3_fu_1017_p2;
wire   [0:0] tmp_31_fu_1007_p3;
wire   [0:0] or_ln412_3_fu_1030_p2;
wire   [0:0] tmp_33_fu_1036_p3;
wire   [0:0] and_ln415_3_fu_1043_p2;
wire   [15:0] trunc_ln708_3_fu_998_p4;
wire   [15:0] zext_ln415_3_fu_1049_p1;
wire   [0:0] xor_ln416_3_fu_1075_p2;
wire   [0:0] and_ln416_3_fu_1080_p2;
wire   [0:0] xor_ln779_3_fu_1085_p2;
wire   [0:0] xor_ln781_7_fu_1097_p2;
wire   [0:0] or_ln781_3_fu_1102_p2;
wire   [0:0] xor_ln785_3_fu_1112_p2;
wire   [0:0] or_ln785_3_fu_1117_p2;
wire   [0:0] select_ln779_3_fu_1090_p3;
wire   [0:0] and_ln781_3_fu_1107_p2;
wire   [0:0] and_ln785_3_fu_1122_p2;
wire   [0:0] and_ln786_3_fu_1128_p2;
wire   [0:0] or_ln340_3_fu_1133_p2;
wire   [0:0] xor_ln786_3_fu_1145_p2;
wire   [0:0] and_ln785_8_fu_1139_p2;
wire   [0:0] and_ln340_3_fu_1151_p2;
wire   [0:0] or_ln340_8_fu_1157_p2;
wire  signed [15:0] select_ln340_3_fu_1163_p3;
wire  signed [16:0] sext_ln703_8_fu_1174_p1;
wire  signed [16:0] sext_ln703_3_fu_1170_p1;
wire   [16:0] add_ln1192_3_fu_1178_p2;
wire   [15:0] acc_0_3_V_fu_1192_p2;
wire   [0:0] tmp_37_fu_1198_p3;
wire   [0:0] tmp_36_fu_1184_p3;
wire   [0:0] xor_ln785_8_fu_1206_p2;
wire  signed [21:0] mul_ln1118_4_fu_1494_p2;
wire   [3:0] trunc_ln718_4_fu_1246_p1;
wire   [0:0] icmp_ln718_4_fu_1249_p2;
wire   [0:0] tmp_39_fu_1239_p3;
wire   [0:0] or_ln412_4_fu_1262_p2;
wire   [0:0] tmp_41_fu_1268_p3;
wire   [0:0] and_ln415_4_fu_1275_p2;
wire   [15:0] trunc_ln708_4_fu_1230_p4;
wire   [15:0] zext_ln415_4_fu_1281_p1;
wire   [0:0] xor_ln416_4_fu_1307_p2;
wire   [0:0] and_ln416_4_fu_1312_p2;
wire   [0:0] xor_ln779_4_fu_1317_p2;
wire   [0:0] xor_ln781_8_fu_1329_p2;
wire   [0:0] or_ln781_4_fu_1334_p2;
wire   [0:0] xor_ln785_4_fu_1344_p2;
wire   [0:0] or_ln785_4_fu_1349_p2;
wire   [0:0] select_ln779_4_fu_1322_p3;
wire   [0:0] and_ln781_4_fu_1339_p2;
wire   [0:0] and_ln785_4_fu_1354_p2;
wire   [0:0] and_ln786_4_fu_1360_p2;
wire   [0:0] or_ln340_4_fu_1365_p2;
wire   [0:0] xor_ln786_4_fu_1377_p2;
wire   [0:0] and_ln785_9_fu_1371_p2;
wire   [0:0] and_ln340_4_fu_1383_p2;
wire   [0:0] or_ln340_9_fu_1389_p2;
wire  signed [15:0] select_ln340_4_fu_1395_p3;
wire  signed [16:0] sext_ln703_9_fu_1406_p1;
wire  signed [16:0] sext_ln703_4_fu_1402_p1;
wire   [16:0] add_ln1192_4_fu_1410_p2;
wire   [15:0] acc_0_4_V_fu_1424_p2;
wire   [0:0] tmp_45_fu_1430_p3;
wire   [0:0] tmp_44_fu_1416_p3;
wire   [0:0] xor_ln785_9_fu_1438_p2;
wire  signed [15:0] mul_ln1118_1_fu_1461_p0;
wire  signed [15:0] mul_ln1118_2_fu_1472_p0;
wire  signed [15:0] mul_ln1118_3_fu_1483_p0;
wire  signed [15:0] mul_ln1118_4_fu_1494_p0;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dense_ss_ap_fixed_ap_fixed_16_4_4_1_0_config17_s_w17_V #(
    .DataWidth( 30 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
w17_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w17_V_address0),
    .ce0(w17_V_ce0),
    .q0(w17_V_q0)
);

myproject_mul_mul_16s_6s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_16s_6s_22_1_1_U252(
    .din0(data_V_V_dout),
    .din1(trunc_ln587_fu_239_p1),
    .dout(mul_ln1118_fu_1452_p2)
);

myproject_mul_mul_16s_6s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_16s_6s_22_1_1_U253(
    .din0(mul_ln1118_1_fu_1461_p0),
    .din1(tmp_27_reg_1553),
    .dout(mul_ln1118_1_fu_1461_p2)
);

myproject_mul_mul_16s_6s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_16s_6s_22_1_1_U254(
    .din0(mul_ln1118_2_fu_1472_p0),
    .din1(tmp_28_reg_1558),
    .dout(mul_ln1118_2_fu_1472_p2)
);

myproject_mul_mul_16s_6s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_16s_6s_22_1_1_U255(
    .din0(mul_ln1118_3_fu_1483_p0),
    .din1(tmp_29_reg_1563),
    .dout(mul_ln1118_3_fu_1483_p2)
);

myproject_mul_mul_16s_6s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_16s_6s_22_1_1_U256(
    .din0(mul_ln1118_4_fu_1494_p0),
    .din1(tmp_30_reg_1568),
    .dout(mul_ln1118_4_fu_1494_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_in_0_reg_211 <= i_in_reg_1509;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_211 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_138_reg_198 <= select_ln785_reg_1573;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_138_reg_198 <= 16'd1639;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_139_reg_185 <= select_ln785_1_reg_1609;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_139_reg_185 <= 16'd65215;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_140_reg_172 <= select_ln785_2_reg_1645;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_140_reg_172 <= 16'd64192;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_141_reg_159 <= select_ln785_3_reg_1681;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_141_reg_159 <= 16'd64190;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_V_142_reg_146 <= select_ln785_4_fu_1444_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_142_reg_146 <= 16'd609;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln415_1_reg_1592 <= add_ln415_1_fu_589_p2;
        tmp_10_reg_1578 <= mul_ln1118_1_fu_1461_p2[32'd21];
        tmp_12_reg_1586 <= mul_ln1118_1_fu_1461_p2[32'd20];
        tmp_14_reg_1597 <= add_ln415_1_fu_589_p2[32'd15];
        tmp_15_reg_1603 <= add_ln415_1_fu_589_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln415_2_reg_1628 <= add_ln415_2_fu_821_p2;
        tmp_18_reg_1614 <= mul_ln1118_2_fu_1472_p2[32'd21];
        tmp_20_reg_1622 <= mul_ln1118_2_fu_1472_p2[32'd20];
        tmp_22_reg_1633 <= add_ln415_2_fu_821_p2[32'd15];
        tmp_23_reg_1639 <= add_ln415_2_fu_821_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln415_3_reg_1664 <= add_ln415_3_fu_1053_p2;
        tmp_26_reg_1650 <= mul_ln1118_3_fu_1483_p2[32'd21];
        tmp_32_reg_1658 <= mul_ln1118_3_fu_1483_p2[32'd20];
        tmp_34_reg_1669 <= add_ln415_3_fu_1053_p2[32'd15];
        tmp_35_reg_1675 <= add_ln415_3_fu_1053_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_4_reg_1700 <= add_ln415_4_fu_1285_p2;
        tmp_38_reg_1686 <= mul_ln1118_4_fu_1494_p2[32'd21];
        tmp_40_reg_1694 <= mul_ln1118_4_fu_1494_p2[32'd20];
        tmp_42_reg_1705 <= add_ln415_4_fu_1285_p2[32'd15];
        tmp_43_reg_1711 <= add_ln415_4_fu_1285_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_in_reg_1509 <= i_in_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln579_reg_1505 <= icmp_ln579_fu_222_p2;
        icmp_ln579_reg_1505_pp0_iter1_reg <= icmp_ln579_reg_1505;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln1118_reg_1527 <= mul_ln1118_fu_1452_p2;
        sext_ln1116_reg_1519 <= sext_ln1116_fu_243_p1;
        tmp_27_reg_1553 <= {{w17_V_q0[11:6]}};
        tmp_28_reg_1558 <= {{w17_V_q0[17:12]}};
        tmp_29_reg_1563 <= {{w17_V_q0[23:18]}};
        tmp_2_reg_1534 <= mul_ln1118_fu_1452_p2[32'd21];
        tmp_30_reg_1568 <= {{w17_V_q0[29:24]}};
        tmp_4_reg_1547 <= mul_ln1118_fu_1452_p2[32'd20];
        trunc_ln718_reg_1542 <= trunc_ln718_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        select_ln785_1_reg_1609 <= select_ln785_1_fu_748_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        select_ln785_2_reg_1645 <= select_ln785_2_fu_980_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln785_3_reg_1681 <= select_ln785_3_fu_1212_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln785_reg_1573 <= select_ln785_fu_516_p3;
    end
end

always @ (*) begin
    if ((icmp_ln579_fu_222_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_in_0_phi_fu_215_p4 = i_in_reg_1509;
    end else begin
        ap_phi_mux_i_in_0_phi_fu_215_p4 = i_in_0_reg_211;
    end
end

always @ (*) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln579_reg_1505 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((res_V_V_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            res_V_V_din = tmp_V_142_reg_146;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            res_V_V_din = tmp_V_141_reg_159;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            res_V_V_din = tmp_V_140_reg_172;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            res_V_V_din = tmp_V_139_reg_185;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            res_V_V_din = tmp_V_138_reg_198;
        end else begin
            res_V_V_din = 'bx;
        end
    end else begin
        res_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce0 = 1'b1;
    end else begin
        w17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln579_fu_222_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln579_fu_222_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_0_V_fu_496_p2 = ($signed(tmp_V_138_reg_198) + $signed(select_ln340_fu_466_p3));

assign acc_0_1_V_fu_728_p2 = ($signed(tmp_V_139_reg_185) + $signed(select_ln340_1_fu_699_p3));

assign acc_0_2_V_fu_960_p2 = ($signed(tmp_V_140_reg_172) + $signed(select_ln340_2_fu_931_p3));

assign acc_0_3_V_fu_1192_p2 = ($signed(tmp_V_141_reg_159) + $signed(select_ln340_3_fu_1163_p3));

assign acc_0_4_V_fu_1424_p2 = ($signed(tmp_V_142_reg_146) + $signed(select_ln340_4_fu_1395_p3));

assign add_ln1192_1_fu_714_p2 = ($signed(sext_ln703_6_fu_710_p1) + $signed(sext_ln703_5_fu_706_p1));

assign add_ln1192_2_fu_946_p2 = ($signed(sext_ln703_7_fu_942_p1) + $signed(sext_ln703_2_fu_938_p1));

assign add_ln1192_3_fu_1178_p2 = ($signed(sext_ln703_8_fu_1174_p1) + $signed(sext_ln703_3_fu_1170_p1));

assign add_ln1192_4_fu_1410_p2 = ($signed(sext_ln703_9_fu_1406_p1) + $signed(sext_ln703_4_fu_1402_p1));

assign add_ln1192_fu_482_p2 = ($signed(sext_ln703_1_fu_478_p1) + $signed(sext_ln703_fu_474_p1));

assign add_ln415_1_fu_589_p2 = (trunc_ln708_1_fu_534_p4 + zext_ln415_1_fu_585_p1);

assign add_ln415_2_fu_821_p2 = (trunc_ln708_2_fu_766_p4 + zext_ln415_2_fu_817_p1);

assign add_ln415_3_fu_1053_p2 = (trunc_ln708_3_fu_998_p4 + zext_ln415_3_fu_1049_p1);

assign add_ln415_4_fu_1285_p2 = (trunc_ln708_4_fu_1230_p4 + zext_ln415_4_fu_1281_p1);

assign add_ln415_fu_352_p2 = (trunc_ln_fu_308_p4 + zext_ln415_fu_348_p1);

assign and_ln340_1_fu_687_p2 = (xor_ln786_1_fu_681_p2 & or_ln340_1_fu_669_p2);

assign and_ln340_2_fu_919_p2 = (xor_ln786_2_fu_913_p2 & or_ln340_2_fu_901_p2);

assign and_ln340_3_fu_1151_p2 = (xor_ln786_3_fu_1145_p2 & or_ln340_3_fu_1133_p2);

assign and_ln340_4_fu_1383_p2 = (xor_ln786_4_fu_1377_p2 & or_ln340_4_fu_1365_p2);

assign and_ln340_fu_454_p2 = (xor_ln786_fu_448_p2 & or_ln340_fu_436_p2);

assign and_ln415_1_fu_579_p2 = (tmp_13_fu_572_p3 & or_ln412_1_fu_566_p2);

assign and_ln415_2_fu_811_p2 = (tmp_21_fu_804_p3 & or_ln412_2_fu_798_p2);

assign and_ln415_3_fu_1043_p2 = (tmp_33_fu_1036_p3 & or_ln412_3_fu_1030_p2);

assign and_ln415_4_fu_1275_p2 = (tmp_41_fu_1268_p3 & or_ln412_4_fu_1262_p2);

assign and_ln415_fu_342_p2 = (tmp_5_fu_335_p3 & or_ln412_fu_329_p2);

assign and_ln416_1_fu_616_p2 = (xor_ln416_1_fu_611_p2 & tmp_12_reg_1586);

assign and_ln416_2_fu_848_p2 = (xor_ln416_2_fu_843_p2 & tmp_20_reg_1622);

assign and_ln416_3_fu_1080_p2 = (xor_ln416_3_fu_1075_p2 & tmp_32_reg_1658);

assign and_ln416_4_fu_1312_p2 = (xor_ln416_4_fu_1307_p2 & tmp_40_reg_1694);

assign and_ln416_fu_372_p2 = (xor_ln416_fu_366_p2 & tmp_4_reg_1547);

assign and_ln781_1_fu_643_p2 = (tmp_10_reg_1578 & or_ln781_1_fu_638_p2);

assign and_ln781_2_fu_875_p2 = (tmp_18_reg_1614 & or_ln781_2_fu_870_p2);

assign and_ln781_3_fu_1107_p2 = (tmp_26_reg_1650 & or_ln781_3_fu_1102_p2);

assign and_ln781_4_fu_1339_p2 = (tmp_38_reg_1686 & or_ln781_4_fu_1334_p2);

assign and_ln781_fu_408_p2 = (tmp_2_reg_1534 & or_ln781_fu_402_p2);

assign and_ln785_1_fu_658_p2 = (xor_ln779_1_fu_621_p2 & or_ln785_1_fu_653_p2);

assign and_ln785_2_fu_890_p2 = (xor_ln779_2_fu_853_p2 & or_ln785_2_fu_885_p2);

assign and_ln785_3_fu_1122_p2 = (xor_ln779_3_fu_1085_p2 & or_ln785_3_fu_1117_p2);

assign and_ln785_4_fu_1354_p2 = (xor_ln779_4_fu_1317_p2 & or_ln785_4_fu_1349_p2);

assign and_ln785_5_fu_442_p2 = (xor_ln779_fu_385_p2 & and_ln786_fu_430_p2);

assign and_ln785_6_fu_675_p2 = (xor_ln779_1_fu_621_p2 & and_ln786_1_fu_664_p2);

assign and_ln785_7_fu_907_p2 = (xor_ln779_2_fu_853_p2 & and_ln786_2_fu_896_p2);

assign and_ln785_8_fu_1139_p2 = (xor_ln779_3_fu_1085_p2 & and_ln786_3_fu_1128_p2);

assign and_ln785_9_fu_1371_p2 = (xor_ln779_4_fu_1317_p2 & and_ln786_4_fu_1360_p2);

assign and_ln785_fu_424_p2 = (xor_ln779_fu_385_p2 & or_ln785_fu_418_p2);

assign and_ln786_1_fu_664_p2 = (tmp_15_reg_1603 & select_ln779_1_fu_626_p3);

assign and_ln786_2_fu_896_p2 = (tmp_23_reg_1639 & select_ln779_2_fu_858_p3);

assign and_ln786_3_fu_1128_p2 = (tmp_35_reg_1675 & select_ln779_3_fu_1090_p3);

assign and_ln786_4_fu_1360_p2 = (tmp_43_reg_1711 & select_ln779_4_fu_1322_p3);

assign and_ln786_fu_430_p2 = (tmp_7_fu_377_p3 & select_ln779_fu_390_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln579_reg_1505 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln579_reg_1505 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln579_reg_1505 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_228_p2 = (ap_phi_mux_i_in_0_phi_fu_215_p4 + 13'd1);

assign icmp_ln579_fu_222_p2 = ((ap_phi_mux_i_in_0_phi_fu_215_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln718_1_fu_553_p2 = ((trunc_ln718_1_fu_550_p1 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_2_fu_785_p2 = ((trunc_ln718_2_fu_782_p1 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_3_fu_1017_p2 = ((trunc_ln718_3_fu_1014_p1 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_4_fu_1249_p2 = ((trunc_ln718_4_fu_1246_p1 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_324_p2 = ((trunc_ln718_reg_1542 != 4'd0) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_1461_p0 = sext_ln1116_reg_1519;

assign mul_ln1118_2_fu_1472_p0 = sext_ln1116_reg_1519;

assign mul_ln1118_3_fu_1483_p0 = sext_ln1116_reg_1519;

assign mul_ln1118_4_fu_1494_p0 = sext_ln1116_reg_1519;

assign or_ln340_1_fu_669_p2 = (and_ln785_1_fu_658_p2 | and_ln781_1_fu_643_p2);

assign or_ln340_2_fu_901_p2 = (and_ln785_2_fu_890_p2 | and_ln781_2_fu_875_p2);

assign or_ln340_3_fu_1133_p2 = (and_ln785_3_fu_1122_p2 | and_ln781_3_fu_1107_p2);

assign or_ln340_4_fu_1365_p2 = (and_ln785_4_fu_1354_p2 | and_ln781_4_fu_1339_p2);

assign or_ln340_5_fu_460_p2 = (and_ln785_5_fu_442_p2 | and_ln340_fu_454_p2);

assign or_ln340_6_fu_693_p2 = (and_ln785_6_fu_675_p2 | and_ln340_1_fu_687_p2);

assign or_ln340_7_fu_925_p2 = (and_ln785_7_fu_907_p2 | and_ln340_2_fu_919_p2);

assign or_ln340_8_fu_1157_p2 = (and_ln785_8_fu_1139_p2 | and_ln340_3_fu_1151_p2);

assign or_ln340_9_fu_1389_p2 = (and_ln785_9_fu_1371_p2 | and_ln340_4_fu_1383_p2);

assign or_ln340_fu_436_p2 = (and_ln785_fu_424_p2 | and_ln781_fu_408_p2);

assign or_ln412_1_fu_566_p2 = (tmp_11_fu_543_p3 | icmp_ln718_1_fu_553_p2);

assign or_ln412_2_fu_798_p2 = (tmp_19_fu_775_p3 | icmp_ln718_2_fu_785_p2);

assign or_ln412_3_fu_1030_p2 = (tmp_31_fu_1007_p3 | icmp_ln718_3_fu_1017_p2);

assign or_ln412_4_fu_1262_p2 = (tmp_39_fu_1239_p3 | icmp_ln718_4_fu_1249_p2);

assign or_ln412_fu_329_p2 = (tmp_3_fu_317_p3 | icmp_ln718_fu_324_p2);

assign or_ln781_1_fu_638_p2 = (xor_ln781_fu_633_p2 | tmp_14_reg_1597);

assign or_ln781_2_fu_870_p2 = (xor_ln781_6_fu_865_p2 | tmp_22_reg_1633);

assign or_ln781_3_fu_1102_p2 = (xor_ln781_7_fu_1097_p2 | tmp_34_reg_1669);

assign or_ln781_4_fu_1334_p2 = (xor_ln781_8_fu_1329_p2 | tmp_42_reg_1705);

assign or_ln781_fu_402_p2 = (xor_ln781_5_fu_397_p2 | tmp_6_fu_358_p3);

assign or_ln785_1_fu_653_p2 = (xor_ln785_5_fu_648_p2 | tmp_15_reg_1603);

assign or_ln785_2_fu_885_p2 = (xor_ln785_2_fu_880_p2 | tmp_23_reg_1639);

assign or_ln785_3_fu_1117_p2 = (xor_ln785_3_fu_1112_p2 | tmp_35_reg_1675);

assign or_ln785_4_fu_1349_p2 = (xor_ln785_4_fu_1344_p2 | tmp_43_reg_1711);

assign or_ln785_fu_418_p2 = (xor_ln785_fu_413_p2 | tmp_7_fu_377_p3);

assign select_ln340_1_fu_699_p3 = ((or_ln340_6_fu_693_p2[0:0] === 1'b1) ? 16'd0 : add_ln415_1_reg_1592);

assign select_ln340_2_fu_931_p3 = ((or_ln340_7_fu_925_p2[0:0] === 1'b1) ? 16'd0 : add_ln415_2_reg_1628);

assign select_ln340_3_fu_1163_p3 = ((or_ln340_8_fu_1157_p2[0:0] === 1'b1) ? 16'd0 : add_ln415_3_reg_1664);

assign select_ln340_4_fu_1395_p3 = ((or_ln340_9_fu_1389_p2[0:0] === 1'b1) ? 16'd0 : add_ln415_4_reg_1700);

assign select_ln340_fu_466_p3 = ((or_ln340_5_fu_460_p2[0:0] === 1'b1) ? 16'd0 : add_ln415_fu_352_p2);

assign select_ln779_1_fu_626_p3 = ((and_ln416_1_fu_616_p2[0:0] === 1'b1) ? xor_ln779_1_fu_621_p2 : tmp_10_reg_1578);

assign select_ln779_2_fu_858_p3 = ((and_ln416_2_fu_848_p2[0:0] === 1'b1) ? xor_ln779_2_fu_853_p2 : tmp_18_reg_1614);

assign select_ln779_3_fu_1090_p3 = ((and_ln416_3_fu_1080_p2[0:0] === 1'b1) ? xor_ln779_3_fu_1085_p2 : tmp_26_reg_1650);

assign select_ln779_4_fu_1322_p3 = ((and_ln416_4_fu_1312_p2[0:0] === 1'b1) ? xor_ln779_4_fu_1317_p2 : tmp_38_reg_1686);

assign select_ln779_fu_390_p3 = ((and_ln416_fu_372_p2[0:0] === 1'b1) ? xor_ln779_fu_385_p2 : tmp_2_reg_1534);

assign select_ln785_1_fu_748_p3 = ((xor_ln785_6_fu_742_p2[0:0] === 1'b1) ? 16'd0 : acc_0_1_V_fu_728_p2);

assign select_ln785_2_fu_980_p3 = ((xor_ln785_7_fu_974_p2[0:0] === 1'b1) ? 16'd0 : acc_0_2_V_fu_960_p2);

assign select_ln785_3_fu_1212_p3 = ((xor_ln785_8_fu_1206_p2[0:0] === 1'b1) ? 16'd0 : acc_0_3_V_fu_1192_p2);

assign select_ln785_4_fu_1444_p3 = ((xor_ln785_9_fu_1438_p2[0:0] === 1'b1) ? 16'd0 : acc_0_4_V_fu_1424_p2);

assign select_ln785_fu_516_p3 = ((xor_ln785_1_fu_510_p2[0:0] === 1'b1) ? 16'd0 : acc_0_0_V_fu_496_p2);

assign sext_ln1116_fu_243_p1 = $signed(data_V_V_dout);

assign sext_ln703_1_fu_478_p1 = select_ln340_fu_466_p3;

assign sext_ln703_2_fu_938_p1 = tmp_V_140_reg_172;

assign sext_ln703_3_fu_1170_p1 = tmp_V_141_reg_159;

assign sext_ln703_4_fu_1402_p1 = tmp_V_142_reg_146;

assign sext_ln703_5_fu_706_p1 = tmp_V_139_reg_185;

assign sext_ln703_6_fu_710_p1 = select_ln340_1_fu_699_p3;

assign sext_ln703_7_fu_942_p1 = select_ln340_2_fu_931_p3;

assign sext_ln703_8_fu_1174_p1 = select_ln340_3_fu_1163_p3;

assign sext_ln703_9_fu_1406_p1 = select_ln340_4_fu_1395_p3;

assign sext_ln703_fu_474_p1 = tmp_V_138_reg_198;

assign start_out = real_start;

assign tmp_11_fu_543_p3 = mul_ln1118_1_fu_1461_p2[32'd5];

assign tmp_13_fu_572_p3 = mul_ln1118_1_fu_1461_p2[32'd4];

assign tmp_16_fu_720_p3 = add_ln1192_1_fu_714_p2[32'd16];

assign tmp_17_fu_734_p3 = acc_0_1_V_fu_728_p2[32'd15];

assign tmp_19_fu_775_p3 = mul_ln1118_2_fu_1472_p2[32'd5];

assign tmp_21_fu_804_p3 = mul_ln1118_2_fu_1472_p2[32'd4];

assign tmp_24_fu_952_p3 = add_ln1192_2_fu_946_p2[32'd16];

assign tmp_25_fu_966_p3 = acc_0_2_V_fu_960_p2[32'd15];

assign tmp_31_fu_1007_p3 = mul_ln1118_3_fu_1483_p2[32'd5];

assign tmp_33_fu_1036_p3 = mul_ln1118_3_fu_1483_p2[32'd4];

assign tmp_36_fu_1184_p3 = add_ln1192_3_fu_1178_p2[32'd16];

assign tmp_37_fu_1198_p3 = acc_0_3_V_fu_1192_p2[32'd15];

assign tmp_39_fu_1239_p3 = mul_ln1118_4_fu_1494_p2[32'd5];

assign tmp_3_fu_317_p3 = mul_ln1118_reg_1527[32'd5];

assign tmp_41_fu_1268_p3 = mul_ln1118_4_fu_1494_p2[32'd4];

assign tmp_44_fu_1416_p3 = add_ln1192_4_fu_1410_p2[32'd16];

assign tmp_45_fu_1430_p3 = acc_0_4_V_fu_1424_p2[32'd15];

assign tmp_5_fu_335_p3 = mul_ln1118_reg_1527[32'd4];

assign tmp_6_fu_358_p3 = add_ln415_fu_352_p2[32'd15];

assign tmp_7_fu_377_p3 = add_ln415_fu_352_p2[32'd15];

assign tmp_8_fu_488_p3 = add_ln1192_fu_482_p2[32'd16];

assign tmp_9_fu_502_p3 = acc_0_0_V_fu_496_p2[32'd15];

assign trunc_ln587_fu_239_p1 = w17_V_q0[5:0];

assign trunc_ln708_1_fu_534_p4 = {{mul_ln1118_1_fu_1461_p2[20:5]}};

assign trunc_ln708_2_fu_766_p4 = {{mul_ln1118_2_fu_1472_p2[20:5]}};

assign trunc_ln708_3_fu_998_p4 = {{mul_ln1118_3_fu_1483_p2[20:5]}};

assign trunc_ln708_4_fu_1230_p4 = {{mul_ln1118_4_fu_1494_p2[20:5]}};

assign trunc_ln718_1_fu_550_p1 = mul_ln1118_1_fu_1461_p2[3:0];

assign trunc_ln718_2_fu_782_p1 = mul_ln1118_2_fu_1472_p2[3:0];

assign trunc_ln718_3_fu_1014_p1 = mul_ln1118_3_fu_1483_p2[3:0];

assign trunc_ln718_4_fu_1246_p1 = mul_ln1118_4_fu_1494_p2[3:0];

assign trunc_ln718_fu_258_p1 = mul_ln1118_fu_1452_p2[3:0];

assign trunc_ln_fu_308_p4 = {{mul_ln1118_reg_1527[20:5]}};

assign w17_V_address0 = zext_ln587_fu_234_p1;

assign xor_ln416_1_fu_611_p2 = (tmp_14_reg_1597 ^ 1'd1);

assign xor_ln416_2_fu_843_p2 = (tmp_22_reg_1633 ^ 1'd1);

assign xor_ln416_3_fu_1075_p2 = (tmp_34_reg_1669 ^ 1'd1);

assign xor_ln416_4_fu_1307_p2 = (tmp_42_reg_1705 ^ 1'd1);

assign xor_ln416_fu_366_p2 = (tmp_6_fu_358_p3 ^ 1'd1);

assign xor_ln779_1_fu_621_p2 = (tmp_10_reg_1578 ^ 1'd1);

assign xor_ln779_2_fu_853_p2 = (tmp_18_reg_1614 ^ 1'd1);

assign xor_ln779_3_fu_1085_p2 = (tmp_26_reg_1650 ^ 1'd1);

assign xor_ln779_4_fu_1317_p2 = (tmp_38_reg_1686 ^ 1'd1);

assign xor_ln779_fu_385_p2 = (tmp_2_reg_1534 ^ 1'd1);

assign xor_ln781_5_fu_397_p2 = (tmp_4_reg_1547 ^ 1'd1);

assign xor_ln781_6_fu_865_p2 = (tmp_20_reg_1622 ^ 1'd1);

assign xor_ln781_7_fu_1097_p2 = (tmp_32_reg_1658 ^ 1'd1);

assign xor_ln781_8_fu_1329_p2 = (tmp_40_reg_1694 ^ 1'd1);

assign xor_ln781_fu_633_p2 = (tmp_12_reg_1586 ^ 1'd1);

assign xor_ln785_1_fu_510_p2 = (tmp_9_fu_502_p3 ^ tmp_8_fu_488_p3);

assign xor_ln785_2_fu_880_p2 = (tmp_18_reg_1614 ^ and_ln416_2_fu_848_p2);

assign xor_ln785_3_fu_1112_p2 = (tmp_26_reg_1650 ^ and_ln416_3_fu_1080_p2);

assign xor_ln785_4_fu_1344_p2 = (tmp_38_reg_1686 ^ and_ln416_4_fu_1312_p2);

assign xor_ln785_5_fu_648_p2 = (tmp_10_reg_1578 ^ and_ln416_1_fu_616_p2);

assign xor_ln785_6_fu_742_p2 = (tmp_17_fu_734_p3 ^ tmp_16_fu_720_p3);

assign xor_ln785_7_fu_974_p2 = (tmp_25_fu_966_p3 ^ tmp_24_fu_952_p3);

assign xor_ln785_8_fu_1206_p2 = (tmp_37_fu_1198_p3 ^ tmp_36_fu_1184_p3);

assign xor_ln785_9_fu_1438_p2 = (tmp_45_fu_1430_p3 ^ tmp_44_fu_1416_p3);

assign xor_ln785_fu_413_p2 = (tmp_2_reg_1534 ^ and_ln416_fu_372_p2);

assign xor_ln786_1_fu_681_p2 = (1'd1 ^ and_ln786_1_fu_664_p2);

assign xor_ln786_2_fu_913_p2 = (1'd1 ^ and_ln786_2_fu_896_p2);

assign xor_ln786_3_fu_1145_p2 = (1'd1 ^ and_ln786_3_fu_1128_p2);

assign xor_ln786_4_fu_1377_p2 = (1'd1 ^ and_ln786_4_fu_1360_p2);

assign xor_ln786_fu_448_p2 = (1'd1 ^ and_ln786_fu_430_p2);

assign zext_ln415_1_fu_585_p1 = and_ln415_1_fu_579_p2;

assign zext_ln415_2_fu_817_p1 = and_ln415_2_fu_811_p2;

assign zext_ln415_3_fu_1049_p1 = and_ln415_3_fu_1043_p2;

assign zext_ln415_4_fu_1281_p1 = and_ln415_4_fu_1275_p2;

assign zext_ln415_fu_348_p1 = and_ln415_fu_342_p2;

assign zext_ln587_fu_234_p1 = ap_phi_mux_i_in_0_phi_fu_215_p4;

endmodule //dense_ss_ap_fixed_ap_fixed_16_4_4_1_0_config17_s
